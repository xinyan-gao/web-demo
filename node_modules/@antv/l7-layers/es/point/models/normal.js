import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { AttributeType, gl } from '@antv/l7-core';
import BaseModel from "../../core/BaseModel";
import { ShaderLocation } from "../../core/CommonStyleAttribute";
/* babel-plugin-inline-import '../shaders/normal/normal_frag.glsl' */
const normalFrag = "in vec4 v_color;\nout vec4 outputColor;\nvoid main() {\n  outputColor = v_color;\n}";
/* babel-plugin-inline-import '../shaders/normal/normal_vert.glsl' */
const normalVert = "layout(location = 0) in vec3 a_Position;\nlayout(location = 1) in vec4 a_Color;\nlayout(location = 9) in float a_Size;\n\nlayout(std140) uniform u_Common {\n  float u_size_scale;\n};\n\nout vec4 v_color;\n\n#pragma include \"projection\"\n#pragma include \"project\"\n\nvoid main() {\n  v_color = vec4(a_Color.xyz, a_Color.w * opacity);\n\n  if (u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp * vec4(a_Position, 1.0);\n  } else {\n    vec4 project_pos = project_position(vec4(a_Position, 1.0)) + vec4(a_Size / 2., -a_Size /2., 0., 0.);\n    gl_Position = project_common_position_to_clipspace(project_pos);\n  }\n\n  gl_PointSize = a_Size * u_size_scale *  2.0  * u_DevicePixelRatio;\n}\n";
export function PointTriangulation(feature) {
  const coordinates = feature.coordinates;
  return {
    vertices: [...coordinates],
    indices: [0],
    size: coordinates.length
  };
}
export default class NormalModel extends BaseModel {
  getDefaultStyle() {
    return {
      blend: 'additive'
    };
  }
  getCommonUniformsInfo() {
    const commonOptions = {
      u_size_scale: 0.5
    };
    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);
    return commonBufferInfo;
  }
  initModels() {
    var _this = this;
    return _asyncToGenerator(function* () {
      return _this.buildModels();
    })();
  }
  buildModels() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      _this2.layer.triangulation = PointTriangulation;
      _this2.initUniformsBuffer();
      const model = yield _this2.layer.buildLayerModel({
        moduleName: 'pointNormal',
        vertexShader: normalVert,
        fragmentShader: normalFrag,
        triangulation: PointTriangulation,
        inject: _this2.getInject(),
        depth: {
          enable: false
        },
        primitive: gl.POINTS,
        pick: false
      });
      return [model];
    })();
  }
  clearModels() {
    return;
  }
  registerBuiltinAttributes() {
    this.styleAttributeService.registerStyleAttribute({
      name: 'size',
      type: AttributeType.Attribute,
      descriptor: {
        name: 'a_Size',
        shaderLocation: ShaderLocation.SIZE,
        buffer: {
          usage: gl.DYNAMIC_DRAW,
          data: [],
          type: gl.FLOAT
        },
        size: 1,
        update: feature => {
          const {
            size = 1
          } = feature;
          return Array.isArray(size) ? [size[0]] : [size];
        }
      }
    });
  }
}