import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// @ts-ignore

import Point from "../../geo/point";
import DOM from "../../utils/dom";
import { Event } from "./event";
export default class MapTouchEvent extends Event {
  /**
   * @private
   */
  constructor(type, map, originalEvent) {
    const touches = type === 'touchend' ? originalEvent.changedTouches : originalEvent.touches;
    const points = DOM.touchPos(map.getCanvasContainer(), touches);
    const lngLats = points.map(t => map.unproject(t));
    const point = points.reduce((prev, curr, i, arr) => {
      return prev.add(curr.div(arr.length));
    }, new Point(0, 0));
    const lngLat = map.unproject(point);
    super(type, {
      points,
      point,
      lngLats,
      lngLat,
      originalEvent
    });
    /**
     * The event type.
     */
    /**
     * The `Map` object that fired the event.
     */
    _defineProperty(this, "target", void 0);
    /**
     * The DOM event which caused the map event.
     */
    _defineProperty(this, "originalEvent", void 0);
    /**
     * The geographic location on the map of the center of the touch event points.
     */
    _defineProperty(this, "lngLat", void 0);
    /**
     * The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left
     * corner.
     */
    _defineProperty(this, "point", void 0);
    /**
     * The array of pixel coordinates corresponding to a
     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.
     */
    _defineProperty(this, "points", void 0);
    /**
     * The geographical locations on the map corresponding to a
     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.
     */
    _defineProperty(this, "lngLats", void 0);
    /**
     * `true` if `preventDefault` has been called.
     * @private
     */
    _defineProperty(this, "defaultPrevented", void 0);
    this.defaultPrevented = false;
  }

  /**
   * Prevents subsequent default processing of the event by the map.
   *
   * Calling this method will prevent the following default map behaviors:
   *
   *   * On `touchstart` events, the behavior of {@link DragPanHandler}
   *   * On `touchstart` events, the behavior of {@link TouchZoomRotateHandler}
   *
   */
  preventDefault() {
    this.defaultPrevented = true;
  }
}