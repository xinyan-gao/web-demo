import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// @ts-ignore

import { MAX_TAP_INTERVAL } from "./single_tap_recognizer";
import TapRecognizer from "./tap_recognizer";
export default class TapDragZoomHandler {
  constructor() {
    _defineProperty(this, "enabled", void 0);
    _defineProperty(this, "active", void 0);
    _defineProperty(this, "swipePoint", void 0);
    _defineProperty(this, "swipeTouch", void 0);
    _defineProperty(this, "tapTime", void 0);
    _defineProperty(this, "tap", void 0);
    this.tap = new TapRecognizer({
      numTouches: 1,
      numTaps: 1
    });
    this.reset();
  }
  reset() {
    this.active = false;
    // @ts-ignore
    delete this.swipePoint;
    // @ts-ignore
    delete this.swipeTouch;
    // @ts-ignore
    delete this.tapTime;
    this.tap.reset();
  }
  touchstart(e, points, mapTouches) {
    if (this.swipePoint) {
      return;
    }
    if (this.tapTime && e.timeStamp - this.tapTime > MAX_TAP_INTERVAL) {
      this.reset();
    }
    if (!this.tapTime) {
      this.tap.touchstart(e, points, mapTouches);
    } else if (mapTouches.length > 0) {
      this.swipePoint = points[0];
      this.swipeTouch = mapTouches[0].identifier;
    }
  }
  touchmove(e, points, mapTouches) {
    if (!this.tapTime) {
      this.tap.touchmove(e, points, mapTouches);
    } else if (this.swipePoint) {
      if (mapTouches[0].identifier !== this.swipeTouch) {
        return;
      }
      const newSwipePoint = points[0];
      const dist = newSwipePoint.y - this.swipePoint.y;
      this.swipePoint = newSwipePoint;
      e.preventDefault();
      this.active = true;
      return {
        zoomDelta: dist / 128
      };
    }
  }
  touchend(e, points, mapTouches) {
    if (!this.tapTime) {
      const point = this.tap.touchend(e, points, mapTouches);
      if (point) {
        this.tapTime = e.timeStamp;
      }
    } else if (this.swipePoint) {
      if (mapTouches.length === 0) {
        this.reset();
      }
    }
  }
  touchcancel() {
    this.reset();
  }
  enable() {
    this.enabled = true;
  }
  disable() {
    this.enabled = false;
    this.reset();
  }
  isEnabled() {
    return this.enabled;
  }
  isActive() {
    return this.active;
  }
}