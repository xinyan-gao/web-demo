import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// @ts-ignore

import { MapMouseEvent, MapTouchEvent, MapWheelEvent } from "./events";
export default class MapEventHandler {
  constructor(map, options) {
    _defineProperty(this, "mousedownPos", void 0);
    _defineProperty(this, "clickTolerance", void 0);
    _defineProperty(this, "map", void 0);
    this.map = map;
    this.clickTolerance = options.clickTolerance;
  }
  reset() {
    // @ts-ignore
    delete this.mousedownPos;
  }
  wheel(e) {
    // If mapEvent.preventDefault() is called by the user, prevent handlers such as:
    // - ScrollZoom
    return this.firePreventable(new MapWheelEvent(e.type, this.map, e));
  }
  mousedown(e, point) {
    this.mousedownPos = point;
    // If mapEvent.preventDefault() is called by the user, prevent handlers such as:
    // - MousePan
    // - MouseRotate
    // - MousePitch
    // - DblclickHandler
    return this.firePreventable(new MapMouseEvent(e.type, this.map, e));
  }
  mouseup(e) {
    this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
  }
  click(e, point) {
    if (this.mousedownPos && this.mousedownPos.dist(point) >= this.clickTolerance) {
      return;
    }
    this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
  }
  dblclick(e) {
    // If mapEvent.preventDefault() is called by the user, prevent handlers such as:
    // - DblClickZoom
    return this.firePreventable(new MapMouseEvent(e.type, this.map, e));
  }
  mouseover(e) {
    this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
  }
  mouseout(e) {
    this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
  }
  touchstart(e) {
    // If mapEvent.preventDefault() is called by the user, prevent handlers such as:
    // - TouchPan
    // - TouchZoom
    // - TouchRotate
    // - TouchPitch
    // - TapZoom
    // - SwipeZoom
    return this.firePreventable(new MapTouchEvent(e.type, this.map, e));
  }
  touchmove(e) {
    this.map.emit(e.type, new MapTouchEvent(e.type, this.map, e));
  }
  touchend(e) {
    this.map.emit(e.type, new MapTouchEvent(e.type, this.map, e));
  }
  touchcancel(e) {
    this.map.emit(e.type, new MapTouchEvent(e.type, this.map, e));
  }
  firePreventable(mapEvent) {
    this.map.emit(mapEvent.type, mapEvent);
    if (mapEvent.defaultPrevented) {
      // returning an object marks the handler as active and resets other handlers
      return {};
    }
  }
  isEnabled() {
    return true;
  }
  isActive() {
    return false;
  }
  enable() {
    return false;
  }
  disable() {
    return false;
  }
}