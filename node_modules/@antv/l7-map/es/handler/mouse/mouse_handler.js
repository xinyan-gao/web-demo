import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// @ts-ignore

import DOM from "../../utils/dom";
import { buttonStillPressed } from "./util";
export default class MouseHandler {
  constructor(options) {
    _defineProperty(this, "enabled", void 0);
    _defineProperty(this, "active", void 0);
    _defineProperty(this, "lastPoint", void 0);
    _defineProperty(this, "eventButton", void 0);
    _defineProperty(this, "moved", void 0);
    _defineProperty(this, "clickTolerance", void 0);
    this.reset();
    this.clickTolerance = options.clickTolerance || 1;
  }
  reset() {
    this.active = false;
    this.moved = false;
    // @ts-ignore
    delete this.lastPoint;
    // @ts-ignore
    delete this.eventButton;
  }
  mousedown(e, point) {
    if (this.lastPoint) {
      return;
    }
    const eventButton = DOM.mouseButton(e);
    if (!this.correctButton(e, eventButton)) {
      return;
    }
    this.lastPoint = point;
    this.eventButton = eventButton;
  }
  mousemoveWindow(e, point) {
    const lastPoint = this.lastPoint;
    if (!lastPoint) {
      return;
    }
    e.preventDefault();
    if (buttonStillPressed(e, this.eventButton)) {
      // Some browsers don't fire a `mouseup` when the mouseup occurs outside
      // the window or iframe:
      // https://github.com/mapbox/mapbox-gl-js/issues/4622
      //
      // If the button is no longer pressed during this `mousemove` it may have
      // been released outside of the window or iframe.
      this.reset();
      return;
    }
    if (!this.moved && point.dist(lastPoint) < this.clickTolerance) {
      return;
    }
    this.moved = true;
    this.lastPoint = point;

    // implemented by child class
    return this.move(lastPoint, point);
  }
  mouseupWindow(e) {
    if (!this.lastPoint) {
      return;
    }
    const eventButton = DOM.mouseButton(e);
    if (eventButton !== this.eventButton) {
      return;
    }
    if (this.moved) {
      DOM.suppressClick();
    }
    this.reset();
  }
  enable() {
    this.enabled = true;
  }
  disable() {
    this.enabled = false;
    this.reset();
  }
  isEnabled() {
    return this.enabled;
  }
  isActive() {
    return this.active;
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  correctButton(e, button) {
    // eslint-disable-line
    return false; // implemented by child
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  move(lastPoint, point) {
    // eslint-disable-line
    return; // implemented by child
  }
}