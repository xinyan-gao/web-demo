import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// @ts-ignore

import DOM from "../../utils/dom";
export default class TwoTouchHandler {
  constructor() {
    _defineProperty(this, "enabled", void 0);
    _defineProperty(this, "active", void 0);
    _defineProperty(this, "firstTwoTouches", void 0);
    _defineProperty(this, "vector", void 0);
    _defineProperty(this, "startVector", void 0);
    _defineProperty(this, "aroundCenter", void 0);
    this.reset();
  }
  reset() {
    this.active = false;
    // @ts-ignore
    delete this.firstTwoTouches;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  start(points) {
    return;
  } // eslint-disable-line
  move(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  points,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  pinchAround,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  e) {
    return;
  } // eslint-disable-line

  touchstart(e, points, mapTouches) {
    if (this.firstTwoTouches || mapTouches.length < 2) {
      return;
    }
    this.firstTwoTouches = [mapTouches[0].identifier, mapTouches[1].identifier];

    // implemented by child classes
    this.start([points[0], points[1]]);
  }
  touchmove(e, points, mapTouches) {
    if (!this.firstTwoTouches) {
      return;
    }
    e.preventDefault();
    const [idA, idB] = this.firstTwoTouches;
    const a = getTouchById(mapTouches, points, idA);
    const b = getTouchById(mapTouches, points, idB);
    if (!a || !b) {
      return;
    }
    const pinchAround = this.aroundCenter ? null : a.add(b).div(2);

    // implemented by child classes
    return this.move([a, b], pinchAround, e);
  }
  touchend(e, points, mapTouches) {
    if (!this.firstTwoTouches) {
      return;
    }
    const [idA, idB] = this.firstTwoTouches;
    const a = getTouchById(mapTouches, points, idA);
    const b = getTouchById(mapTouches, points, idB);
    if (a && b) {
      return;
    }
    if (this.active) {
      DOM.suppressClick();
    }
    this.reset();
  }
  touchcancel() {
    this.reset();
  }
  enable(options) {
    this.enabled = true;
    this.aroundCenter = !!options && options.around === 'center';
  }
  disable() {
    this.enabled = false;
    this.reset();
  }
  isEnabled() {
    return this.enabled;
  }
  isActive() {
    return this.active;
  }
}
function getTouchById(mapTouches, points, identifier) {
  for (let i = 0; i < mapTouches.length; i++) {
    if (mapTouches[i].identifier === identifier) {
      return points[i];
    }
  }
}