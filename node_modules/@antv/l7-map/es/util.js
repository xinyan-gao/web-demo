// @ts-ignore
import UnitBezier from '@mapbox/unitbezier';
let reducedMotionQuery;
export function wrap(n, min, max) {
  const d = max - min;
  const w = ((n - min) % d + d) % d + min;
  return w === min ? max : w;
}
export function clamp(n, min, max) {
  return Math.min(max, Math.max(min, n));
}
export function interpolate(a, b, t) {
  return a * (1 - t) + b * t;
}
export function bezier(p1x, p1y, p2x, p2y) {
  const bez = new UnitBezier(p1x, p1y, p2x, p2y);
  return t => {
    return bez.solve(t);
  };
}
export const ease = bezier(0.25, 0.1, 0.25, 1);
export function prefersReducedMotion() {
  var _reducedMotionQuery;
  // Lazily initialize media query
  if (reducedMotionQuery == null && typeof window !== 'undefined' && window.matchMedia) {
    // @ts-ignore
    reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
  }
  return (_reducedMotionQuery = reducedMotionQuery) === null || _reducedMotionQuery === void 0 ? void 0 : _reducedMotionQuery.matches;
}
export function pick(src, properties) {
  const result = {};
  for (const name of properties) {
    if (name in src) {
      result[name] = src[name];
    }
  }
  return result;
}
export const now = window.performance && window.performance.now ? window.performance.now.bind(window.performance) : Date.now.bind(Date);
export const raf = window.requestAnimationFrame ||
// @ts-ignore
window.mozRequestAnimationFrame ||
// @ts-ignore
window.webkitRequestAnimationFrame ||
// @ts-ignore
window.msRequestAnimationFrame;
export const cancel = window.cancelAnimationFrame ||
// @ts-ignore
window.mozCancelAnimationFrame ||
// @ts-ignore
window.webkitCancelAnimationFrame ||
// @ts-ignore
window.msCancelAnimationFrame;
export function renderframe(fn) {
  const frame = raf(fn);
  return {
    cancel: () => cancel(frame)
  };
}
export function extend(dest, ...sources) {
  for (const src of sources) {
    for (const k in src) {
      if (src[k] !== undefined) {
        dest[k] = src[k];
      }
    }
  }
  return dest;
}