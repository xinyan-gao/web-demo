import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import LngLat, { earthRadius } from "../geo/lng_lat";

/*
 * The average circumference of the world in meters.
 */
const earthCircumfrence = 2 * Math.PI * earthRadius; // meters

/*
 * The circumference at a line of latitude in meters.
 */
export function circumferenceAtLatitude(latitude) {
  return earthCircumfrence * Math.cos(latitude * Math.PI / 180);
}
export function mercatorXfromLng(lng) {
  return lng;
}
export function mercatorYfromLat(lat) {
  return lat;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function mercatorZfromAltitude(altitude, lat) {
  return altitude;
}
export function lngFromMercatorX(x) {
  return x;
}
export function latFromMercatorY(y) {
  return y;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function altitudeFromMercatorZ(z, y) {
  return z;
}

/**
 * Determine the Mercator scale factor for a given latitude, see
 * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor
 *
 * At the equator the scale factor will be 1, which increases at higher latitudes.
 *
 * @param {number} lat Latitude
 * @returns {number} scale factor
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function mercatorScale(lat) {
  return 1;
}
export default class SimpleCoordinate {
  static fromLngLat(lngLatLike, altitude = 0) {
    const lngLat = LngLat.convert(lngLatLike);
    return new SimpleCoordinate(mercatorXfromLng(lngLat.lng), mercatorYfromLat(lngLat.lat), mercatorZfromAltitude(altitude, lngLat.lat));
  }
  constructor(x, y, z = 0) {
    _defineProperty(this, "x", void 0);
    _defineProperty(this, "y", void 0);
    _defineProperty(this, "z", void 0);
    this.x = +x;
    this.y = +y;
    this.z = +z;
  }
  toLngLat() {
    return new LngLat(this.x, this.y);
  }
  toAltitude() {
    return this.z;
  }
  meterInMercatorCoordinateUnits() {
    // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude
    return 1;
  }
}