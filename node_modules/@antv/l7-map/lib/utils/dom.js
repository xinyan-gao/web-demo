"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _point = _interopRequireDefault(require("../geo/point"));
// @ts-ignore

const DOM = {};
var _default = exports.default = DOM;
DOM.create = (tagName, className, container) => {
  const el = window.document.createElement(tagName);
  if (className !== undefined) {
    el.className = className;
  }
  if (container) {
    container.appendChild(el);
  }
  return el;
};
DOM.createNS = (namespaceURI, tagName) => {
  const el = window.document.createElementNS(namespaceURI, tagName);
  return el;
};
const docStyle = window.document && window.document.documentElement.style;
function testProp(props) {
  if (!docStyle) {
    return props[0];
  }
  for (const i of props) {
    if (i in docStyle) {
      return i;
    }
  }
  return props[0];
}
const selectProp = testProp(['userSelect', 'MozUserSelect', 'WebkitUserSelect', 'msUserSelect']);
let userSelect;
DOM.disableDrag = () => {
  if (docStyle && selectProp) {
    userSelect = docStyle[selectProp];
    docStyle[selectProp] = 'none';
  }
};
DOM.enableDrag = () => {
  if (docStyle && selectProp) {
    docStyle[selectProp] = userSelect;
  }
};
const transformProp = testProp(['transform', 'WebkitTransform']);
DOM.setTransform = (el, value) => {
  // https://github.com/facebook/flow/issues/7754
  // $FlowFixMe
  el.style[transformProp] = value;
};

// Feature detection for {passive: false} support in add/removeEventListener.
let passiveSupported = false;
try {
  // https://github.com/facebook/flow/issues/285
  // $FlowFixMe
  const options = Object.defineProperty({}, 'passive', {
    get() {
      // eslint-disable-line
      passiveSupported = true;
    }
  });
  // @ts-ignore
  window.addEventListener('test', options, options);
  // @ts-ignore
  window.removeEventListener('test', options, options);
} catch (err) {
  passiveSupported = false;
}
DOM.addEventListener = (target, type, callback, options = {}) => {
  if ('passive' in options && passiveSupported) {
    target.addEventListener(type, callback, options);
  } else {
    target.addEventListener(type, callback, options.capture);
  }
};
DOM.removeEventListener = (target, type, callback, options = {}) => {
  if ('passive' in options && passiveSupported) {
    target.removeEventListener(type, callback, options);
  } else {
    target.removeEventListener(type, callback, options.capture);
  }
};

// Suppress the next click, but only if it's immediate.
const suppressClick = e => {
  e.preventDefault();
  e.stopPropagation();
  window.removeEventListener('click', suppressClick, true);
};
DOM.suppressClick = () => {
  window.addEventListener('click', suppressClick, true);
  setTimeout(() => {
    window.removeEventListener('click', suppressClick, true);
  }, 0);
};
DOM.mousePos = (el, e) => {
  // 暂时从 el 上获取 top/left， 后面需要动态获取
  const rect = el.getBoundingClientRect();
  return new _point.default(e.clientX - rect.left - el.clientLeft, e.clientY - rect.top - el.clientTop);
};
DOM.touchPos = (el, touches) => {
  // 暂时从 el 上获取 top/left， 后面需要动态获取
  const rect = el.getBoundingClientRect();
  const points = [];
  for (const touche of touches) {
    points.push(new _point.default(touche.clientX - rect.left - el.clientLeft, touche.clientY - rect.top - el.clientTop));
  }
  return points;
};
DOM.mouseButton = e => {
  return e.button;
};
DOM.remove = node => {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
};