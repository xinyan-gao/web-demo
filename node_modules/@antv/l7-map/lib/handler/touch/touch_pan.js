"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _point = _interopRequireDefault(require("../../geo/point"));
var _handler_util = require("../handler_util");
// @ts-ignore

class TouchPanHandler {
  constructor(options) {
    (0, _defineProperty2.default)(this, "enabled", void 0);
    (0, _defineProperty2.default)(this, "active", void 0);
    (0, _defineProperty2.default)(this, "touches", void 0);
    (0, _defineProperty2.default)(this, "minTouches", void 0);
    (0, _defineProperty2.default)(this, "clickTolerance", void 0);
    (0, _defineProperty2.default)(this, "sum", void 0);
    this.minTouches = 1;
    this.clickTolerance = options.clickTolerance || 1;
    this.reset();
  }
  reset() {
    this.active = false;
    this.touches = {};
    this.sum = new _point.default(0, 0);
  }
  touchstart(e, points, mapTouches) {
    return this.calculateTransform(e, points, mapTouches);
  }
  touchmove(e, points, mapTouches) {
    if (!this.active) {
      return;
    }
    e.preventDefault();
    return this.calculateTransform(e, points, mapTouches);
  }
  touchend(e, points, mapTouches) {
    this.calculateTransform(e, points, mapTouches);
    if (this.active && mapTouches.length < this.minTouches) {
      this.reset();
    }
  }
  touchcancel() {
    this.reset();
  }
  enable() {
    this.enabled = true;
  }
  disable() {
    this.enabled = false;
    this.reset();
  }
  isEnabled() {
    return this.enabled;
  }
  isActive() {
    return this.active;
  }
  calculateTransform(e, points, mapTouches) {
    if (mapTouches.length > 0) {
      this.active = true;
    }
    const touches = (0, _handler_util.indexTouches)(mapTouches, points);
    const touchPointSum = new _point.default(0, 0);
    const touchDeltaSum = new _point.default(0, 0);
    let touchDeltaCount = 0;
    for (const identifier in touches) {
      if (touches[identifier]) {
        const point = touches[identifier];
        const prevPoint = this.touches[identifier];
        if (prevPoint) {
          touchPointSum._add(point);
          touchDeltaSum._add(point.sub(prevPoint));
          touchDeltaCount++;
          touches[identifier] = point;
        }
      }
    }
    this.touches = touches;
    if (touchDeltaCount < this.minTouches || !touchDeltaSum.mag()) {
      return;
    }
    // @ts-ignore
    const panDelta = touchDeltaSum.div(touchDeltaCount);
    this.sum._add(panDelta);
    if (this.sum.mag() < this.clickTolerance) {
      return;
    }
    // @ts-ignore
    const around = touchPointSum.div(touchDeltaCount);
    return {
      around,
      panDelta
    };
  }
}
exports.default = TouchPanHandler;