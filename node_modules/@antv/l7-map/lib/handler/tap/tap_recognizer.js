"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _single_tap_recognizer = _interopRequireWildcard(require("./single_tap_recognizer"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// @ts-ignore

class TapRecognizer {
  constructor(options) {
    (0, _defineProperty2.default)(this, "singleTap", void 0);
    (0, _defineProperty2.default)(this, "numTaps", void 0);
    (0, _defineProperty2.default)(this, "lastTime", void 0);
    (0, _defineProperty2.default)(this, "lastTap", void 0);
    (0, _defineProperty2.default)(this, "count", void 0);
    this.singleTap = new _single_tap_recognizer.default(options);
    this.numTaps = options.numTaps;
    this.reset();
  }
  reset() {
    this.lastTime = Infinity;
    // @ts-ignore
    delete this.lastTap;
    this.count = 0;
    this.singleTap.reset();
  }
  touchstart(e, points, mapTouches) {
    this.singleTap.touchstart(e, points, mapTouches);
  }
  touchmove(e, points, mapTouches) {
    this.singleTap.touchmove(e, points, mapTouches);
  }
  touchend(e, points, mapTouches) {
    const tap = this.singleTap.touchend(e, points, mapTouches);
    if (tap) {
      const soonEnough = e.timeStamp - this.lastTime < _single_tap_recognizer.MAX_TAP_INTERVAL;
      const closeEnough = !this.lastTap || this.lastTap.dist(tap) < _single_tap_recognizer.MAX_DIST;
      if (!soonEnough || !closeEnough) {
        this.reset();
      }
      this.count++;
      this.lastTime = e.timeStamp;
      this.lastTap = tap;
      if (this.count === this.numTaps) {
        this.reset();
        return tap;
      }
    }
  }
}
exports.default = TapRecognizer;