"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _amapJsapiLoader = _interopRequireDefault(require("@amap/amap-jsapi-loader"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _glMatrix = require("gl-matrix");
var _AMapBaseService = _interopRequireDefault(require("../utils/amap/AMapBaseService"));
var _Viewport = _interopRequireDefault(require("./Viewport"));
const _excluded = ["id", "style", "minZoom", "maxZoom", "token", "mapInstance", "plugin", "version"];
/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * AMapService
 */
function loadStyles(css, doc) {
  var isMiniAli = typeof my !== 'undefined' && !!my && typeof my.showToast === 'function' && my.isFRM !== true;
  var isWeChatMiniProgram = typeof wx !== 'undefined' && wx !== null && (typeof wx.request !== 'undefined' || typeof wx.miniProgram !== 'undefined');
  if (isMiniAli || isWeChatMiniProgram) {
    return;
  }
  if (!doc) doc = document;
  if (!doc) {
    return;
  }
  var head = doc.head || doc.getElementsByTagName('head')[0];
  if (!head) {
    head = doc.createElement('head');
    var body = doc.body || doc.getElementsByTagName('body')[0];
    if (body) {
      body.parentNode.insertBefore(head, body);
    } else {
      doc.documentElement.appendChild(head);
    }
  }
  var style = doc.createElement('style');
  style.type = 'text/css';
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(doc.createTextNode(css));
  }
  head.appendChild(style);
  return style;
}
loadStyles(`.amap-logo {
  display: none !important;
}
.amap-copyright {
  display: none !important;
}
.amap-overlays {
  z-index: 3 !important;
}
`);
const DEFAULTMAPCENTER = [108.92361, 34.54083];

// @ts-ignore
window.forceWebGL = true;
const AMAP_API_KEY = 'f59bcf249433f8b05caaee19f349b3d7';
// 'ff533602d57df6f8ab3b0fea226ae52f';
const AMAP_VERSION = '2.0';

/**
 * 高德地图脚本是否加载完毕
 */
const amapLoaded = false;
/**
 * 高德地图脚本加载成功等待队列，成功之后依次触发
 */
const pendingResolveQueue = [];

/**
 * AMapService
 */
class AMapService extends _AMapBaseService.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "version", 'GAODE2.x');
    /**
     * 用于 customCooords 数据的计算
     */
    (0, _defineProperty2.default)(this, "sceneCenter", void 0);
    // 一般使用用户数据的第一个
    (0, _defineProperty2.default)(this, "sceneCenterMercator", void 0);
    // 莫卡托
    (0, _defineProperty2.default)(this, "viewport", void 0);
    /**
     *
     * @param e
     */
    (0, _defineProperty2.default)(this, "handleViewChanged", e => {
      const {
        // @ts-ignore
        fov,
        // @ts-ignore
        near,
        // @ts-ignore
        far,
        // @ts-ignore
        aspect,
        // @ts-ignore
        position,
        // @ts-ignore
        lookAt,
        // @ts-ignore
        up
        // @ts-ignore
        // left, right, bottom, top
        // @ts-ignore
      } = this.map.customCoords.getCameraParams();
      // Tip: 统一触发地图变化事件
      this.emit('mapchange');
      // @ts-ignore
      const center = this.map.customCoords.getCenter();
      if (this.cameraChangedCallback) {
        // resync viewport
        this.viewport.syncWithMapCamera({
          aspect,
          far,
          fov,
          cameraPosition: position,
          lookAt,
          up,
          near,
          // AMap 定义的缩放等级 与 Mapbox 相差 1
          zoom: this.map.getZoom() - 1,
          // 与amap1.x对比相差一个级别
          center,
          offsetOrigin: [position[0], position[1]]

          // @ts-ignore
          // left, right, bottom, top
        });
        // set coordinate system
        this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.P20_2);
        this.cameraChangedCallback(this.viewport);
      }
    });
  }
  /**
   *   设置数据的绘制中心 高德2.0
   */
  setCustomCoordCenter(center) {
    this.sceneCenter = center;
    this.sceneCenterMercator = (0, _l7Utils.amap2Project)(...center);
  }
  getCustomCoordCenter() {
    return this.sceneCenterMercator;
  }
  lngLatToCoordByLayer(lnglat, layerCenterMercator) {
    const layerCenterFlat = layerCenterMercator || this.sceneCenterMercator;
    const coord = this._sub((0, _l7Utils.amap2Project)(lnglat[0], lnglat[1]), layerCenterFlat);
    // Z 参数
    if (lnglat[2]) {
      coord.push(lnglat[2]);
    }
    return coord;
  }
  coordToAMap2RelativeCoordinates(lnglatArray, layerCenter) {
    const layerCenterMercator = (0, _l7Utils.amap2Project)(layerCenter[0], layerCenter[1]);
    if (typeof lnglatArray[0] === 'number') {
      return this.lngLatToCoordByLayer(lnglatArray, layerCenterMercator);
    } else {
      // @ts-ignore
      return lnglatArray.map(lnglats => {
        if (Array.isArray(lnglats) && typeof lnglats[0] === 'number') {
          return this.lngLatToCoordByLayer(lnglats, layerCenterMercator);
        } else {
          // @ts-ignore
          return lnglats.map(lnglat => {
            return this.lngLatToCoordByLayer(lnglat, layerCenterMercator);
          });
        }
      });
    }
  }
  setCoordCenter(center) {
    // @ts-ignore
    this.map.customCoords.setCenter(center || DEFAULTMAPCENTER);
    this.setCustomCoordCenter(center || DEFAULTMAPCENTER);
  }

  /**
   * 根据数据的绘制中心转换经纬度数据 高德2.0
   */
  lngLatToCoord(lnglat) {
    // 单点
    if (!this.sceneCenter) {
      // @ts-ignore
      this.map.customCoords.setCenter(lnglat);
      this.setCustomCoordCenter(lnglat);
    }
    return this._sub((0, _l7Utils.amap2Project)(lnglat[0], lnglat[1]), this.sceneCenterMercator);
  }

  /**
   * 转化线、面类型的点位数据
   */
  lngLatToCoords(lnglatArray) {
    // @ts-ignore
    return lnglatArray.map(lnglats => {
      if (typeof lnglats[0] === 'number') {
        return this.lngLatToCoord(lnglats);
      } else {
        // @ts-ignore
        return lnglats.map(lnglat => {
          return this.lngLatToCoord(lnglat);
        });
      }
    });
  }
  addMarkerContainer() {
    if (!this.map) {
      return;
    }
    const mapContainer = this.map.getContainer();
    if (mapContainer !== null) {
      const amap = mapContainer.getElementsByClassName('amap-maps')[0];
      // amap2 的 amap-maps 新增 z-index=0; 样式，让 marker 中 zIndex 失效
      amap.style.zIndex = 'auto';
      this.markerContainer = _l7Utils.DOM.create('div', 'l7-marker-container2', amap);
    }
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  // tslint:disable-next-line:variable-name no-empty
  updateView(_viewOption) {}
  getOverlayContainer() {
    return undefined;
  }
  getType() {
    return 'amap2';
  }
  getBounds() {
    const bounds = this.map.getBounds();

    // @ts-ignore
    const NE = bounds.getNorthEast();
    // @ts-ignore
    const SW = bounds.getSouthWest();
    const center = this.getCenter();
    const maxlng = center.lng > NE.getLng() || center.lng < SW.getLng() ? 180 - NE.getLng() : NE.getLng();
    const minlng = center.lng < SW.getLng() ? SW.getLng() - 180 : SW.getLng();
    // 兼容 Mapbox，统一返回西南、东北
    return [[minlng, SW.getLat()], [maxlng, NE.getLat()]];
  }
  getMinZoom() {
    // const zooms = this.map.get('zooms') as [number, number];
    // @ts-ignore
    const zooms = this.map.getZooms();
    return zooms[0] - 1;
  }
  getMaxZoom() {
    // const zooms = this.map.get('zooms') as [number, number];
    // @ts-ignore
    const zooms = this.map.getZooms();
    return zooms[1] - 1;
  }
  lngLatToContainer(lnglat) {
    const pixel = this.map.lngLatToContainer(lnglat);
    return {
      x: pixel.getX(),
      y: pixel.getY()
    };
  }
  lngLatToPixel(lnglat) {
    // @ts-ignore
    const p = this.map.lngLatToPixel(new AMap.LngLat(lnglat[0], lnglat[1]));
    // lngLatToPixel
    return {
      x: p.getX(),
      y: p.getY()
    };
  }
  getModelMatrix(lnglat, altitude, rotate, scale = [1, 1, 1]) {
    // const flat = this.viewport.projectFlat(lnglat);
    // @ts-ignore
    const flat = this.map.customCoords.lngLatToCoord(lnglat);
    // @ts-ignore
    const modelMatrix = _glMatrix.mat4.create();
    _glMatrix.mat4.translate(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(flat[0], flat[1], altitude));
    _glMatrix.mat4.scale(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(scale[0], scale[1], scale[2]));
    _glMatrix.mat4.rotateX(modelMatrix, modelMatrix, rotate[0]);
    _glMatrix.mat4.rotateY(modelMatrix, modelMatrix, rotate[1]);
    _glMatrix.mat4.rotateZ(modelMatrix, modelMatrix, rotate[2]);
    return modelMatrix;
  }
  init() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const _this$config = _this.config,
        {
          id,
          style = 'light',
          minZoom = 0,
          maxZoom = 24,
          token = AMAP_API_KEY,
          mapInstance,
          plugin = [],
          version = AMAP_VERSION
        } = _this$config,
        rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded);
      _this.viewport = new _Viewport.default();
      if (!(window.AMap || mapInstance)) {
        plugin.push('Map3D');
        // if (AMapLoader.status.AMap === 'notload') {
        yield _amapJsapiLoader.default.load({
          key: token,
          // 申请好的Web端开发者Key，首次调用 load 时必填
          version: AMAP_VERSION,
          // 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15
          plugins: plugin // 需要使用的的插件列表，如比例尺'AMap.Scale'等
        });
      }
      if (mapInstance) {
        var _this$map$customCoord;
        _this.map = mapInstance;
        _this.$mapContainer = _this.map.getContainer();

        // 在使用 map.customCoords 的时候必须使用
        const mapInitCenter = _this.map.getCenter();
        // @ts-ignore
        (_this$map$customCoord = _this.map.customCoords) === null || _this$map$customCoord === void 0 || _this$map$customCoord.setCenter([
        // @ts-ignore
        mapInitCenter.lng,
        // @ts-ignore
        mapInitCenter.lat]);
        // @ts-ignore
        _this.setCustomCoordCenter([mapInitCenter.lng, mapInitCenter.lat]);
        _this.map.on('viewchange', _this.handleViewChanged);
      } else {
        var _this$map$customCoord2;
        _this.$mapContainer = _this.creatMapContainer(id);
        const mapConstructorOptions = (0, _objectSpread2.default)({
          mapStyle: _this.getMapStyleValue(style),
          zooms: [minZoom, maxZoom],
          viewMode: '3D'
        }, rest);
        if (mapConstructorOptions.zoom) {
          // 高德地图在相同大小下需要比 MapBox 多一个 zoom 层级
          mapConstructorOptions.zoom += 1;
        }
        if (token === AMAP_API_KEY) {
          // @ts-ignore
          window._AMapSecurityConfig = {
            securityJsCode: '2653011adeb04230b3a26cc9a780a800'
          };
          console.warn(`%c${_this.configService.getSceneWarninfo('MapToken')}!`, 'color: #873bf4;font-weigh:900;font-size: 16px;');
        }
        // @ts-ignore
        const map = new AMap.Map(_this.$mapContainer, mapConstructorOptions);
        // @ts-ignore
        _this.map = map;
        // 在使用 map.customCoords 的时候必须使用
        const mapInitCenter = map.getCenter();
        // @ts-ignore

        // @ts-ignore
        (_this$map$customCoord2 = _this.map.customCoords) === null || _this$map$customCoord2 === void 0 || _this$map$customCoord2.setCenter([mapInitCenter.lng, mapInitCenter.lat]);

        // @ts-ignore
        _this.setCustomCoordCenter([mapInitCenter.lng, mapInitCenter.lat]);
        // 监听地图相机事件
        map.on('viewchange', _this.handleViewChanged);
      }
      _this.initViewPort();
    })();
  }
  getMapContainer() {
    return this.$mapContainer;
  }
  onCameraChanged(callback) {
    this.cameraChangedCallback = callback;
  }
  initViewPort() {
    var _this$map$customCoord3;
    // @ts-ignore
    const {
      // @ts-ignore
      fov,
      // @ts-ignore
      near,
      // @ts-ignore
      far,
      // @ts-ignore
      aspect,
      // @ts-ignore
      position,
      // @ts-ignore
      lookAt,
      // @ts-ignore
      up
      // @ts-ignore
      // left, right, bottom, top
      // @ts-ignore
    } = ((_this$map$customCoord3 = this.map.customCoords) === null || _this$map$customCoord3 === void 0 ? void 0 : _this$map$customCoord3.getCameraParams()) || {};
    // Tip: 统一触发地图变化事件
    this.emit('mapchange');
    // @ts-ignore
    const center = this.map.customCoords.getCenter();
    const zoom = this.map.getZoom();
    // @ts-ignore
    if (this.cameraChangedCallback) {
      this.viewport.syncWithMapCamera({
        aspect,
        far,
        fov,
        cameraPosition: position,
        lookAt,
        near,
        up,
        // AMap 定义的缩放等级 与 Mapbox 相差 1
        zoom: zoom - 1,
        // 与amap1.x对比相差一个级别
        center,
        offsetOrigin: [position[0], position[1]]

        // @ts-ignore
        // left, right, bottom, top
      });
      // set coordinate system
      this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.P20_2);
      this.cameraChangedCallback(this.viewport);
    }
  }
  _sub(a, b) {
    const r = [0, 0];
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    return r;
  }
}
exports.default = AMapService;