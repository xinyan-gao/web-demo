"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _viewportMercatorProject = _interopRequireDefault(require("viewport-mercator-project"));
class Viewport {
  constructor() {
    (0, _defineProperty2.default)(this, "viewport", void 0);
  }
  syncWithMapCamera(mapCamera) {
    const {
      center,
      zoom,
      pitch,
      bearing,
      viewportHeight,
      viewportWidth
    } = mapCamera;
    const preView = this.viewport ? {
      width: this.viewport.width,
      height: this.viewport.height,
      longitude: this.viewport.center[0],
      latitude: this.viewport.center[1],
      zoom: this.viewport.zoom,
      pitch: this.viewport.pitch,
      bearing: this.viewport.bearing
    } : {};

    /**
     * Deck.gl 使用的也是 Mapbox 同步相机，相机参数保持一致
     * 例如相机高度固定为 height * 1.5，因此不需要传
     */
    this.viewport = new _viewportMercatorProject.default((0, _objectSpread2.default)((0, _objectSpread2.default)({}, preView), {}, {
      width: viewportWidth,
      height: viewportHeight,
      longitude: center && center[0],
      latitude: center && center[1],
      zoom,
      pitch,
      bearing
    }));
  }
  getZoom() {
    return this.viewport.zoom;
  }
  getZoomScale() {
    return Math.pow(2, this.getZoom());
  }
  getCenter() {
    return [this.viewport.longitude, this.viewport.latitude];
  }
  getProjectionMatrix() {
    return this.viewport.projectionMatrix;
  }
  getModelMatrix() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }
  getViewMatrix() {
    return this.viewport.viewMatrix;
  }
  getViewMatrixUncentered() {
    // @ts-ignore
    return this.viewport.viewMatrixUncentered;
  }
  getViewProjectionMatrix() {
    // @ts-ignore
    return this.viewport.viewProjectionMatrix;
  }
  getViewProjectionMatrixUncentered() {
    // @ts-ignore
    return this.viewport.viewProjectionMatrix;
  }
  getFocalDistance() {
    return 1;
  }

  /**
   * P20 坐标系，固定 scale
   */

  projectFlat(lngLat, scale) {
    return this.viewport.projectFlat(lngLat, scale);
  }
}
exports.default = Viewport;