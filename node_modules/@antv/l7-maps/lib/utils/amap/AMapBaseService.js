"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _amapJsapiLoader = _interopRequireDefault(require("@amap/amap-jsapi-loader"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _eventemitter = require("eventemitter3");
var _glMatrix = require("gl-matrix");
var _Viewport = _interopRequireDefault(require("../Viewport"));
var _simpleMapCoord = require("../simpleMapCoord");
var _utils = require("../utils");
var _theme = require("./theme");
const _excluded = ["id", "style", "minZoom", "maxZoom", "token", "mapInstance", "plugin"];
/**
 * AMapService
 */
function loadStyles(css, doc) {
  var isMiniAli = typeof my !== 'undefined' && !!my && typeof my.showToast === 'function' && my.isFRM !== true;
  var isWeChatMiniProgram = typeof wx !== 'undefined' && wx !== null && (typeof wx.request !== 'undefined' || typeof wx.miniProgram !== 'undefined');
  if (isMiniAli || isWeChatMiniProgram) {
    return;
  }
  if (!doc) doc = document;
  if (!doc) {
    return;
  }
  var head = doc.head || doc.getElementsByTagName('head')[0];
  if (!head) {
    head = doc.createElement('head');
    var body = doc.body || doc.getElementsByTagName('body')[0];
    if (body) {
      body.parentNode.insertBefore(head, body);
    } else {
      doc.documentElement.appendChild(head);
    }
  }
  var style = doc.createElement('style');
  style.type = 'text/css';
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(doc.createTextNode(css));
  }
  head.appendChild(style);
  return style;
}
loadStyles(`.amap-logo {
  display: none !important;
}
.amap-copyright {
  display: none !important;
}
`);
const AMapEventMapV1 = {
  contextmenu: 'rightclick'
};
const AMapEventMapV2 = {
  contextmenu: 'rightclick',
  camerachange: 'viewchange'
};
const MapEventProxyMap = {
  'GAODE1.x': AMapEventMapV1,
  'GAODE2.x': AMapEventMapV2
};
let mapdivCount = 0;
// @ts-ignore
window.forceWebGL = true;
const AMAP_API_KEY = '15cd8a57710d40c9b7c0e3cc120f1200';
const AMAP_VERSION = '1.4.15';
/**
 * 确保多个场景只引入一个高德地图脚本
 */
const AMAP_SCRIPT_ID = 'amap-script';
/**
 * 高德地图脚本是否加载完毕
 */
let amapLoaded = false;
/**
 * 高德地图脚本加载成功等待队列，成功之后依次触发
 */
let pendingResolveQueue = [];
const LNGLAT_OFFSET_ZOOM_THRESHOLD = 12; // 暂时关闭 fix 统一不同坐标系，不同底图的高度位置

/**
 * AMapService
 */
class AMapBaseService {
  constructor(container) {
    (0, _defineProperty2.default)(this, "version", _l7Utils.MapType['GAODE1.x']);
    (0, _defineProperty2.default)(this, "simpleMapCoord", new _simpleMapCoord.SimpleMapCoord());
    /**
     * 原始地图实例
     */
    (0, _defineProperty2.default)(this, "map", void 0);
    // 背景色
    (0, _defineProperty2.default)(this, "bgColor", 'rgba(0, 0, 0, 0)');
    (0, _defineProperty2.default)(this, "configService", void 0);
    (0, _defineProperty2.default)(this, "config", void 0);
    (0, _defineProperty2.default)(this, "coordinateSystemService", void 0);
    (0, _defineProperty2.default)(this, "eventEmitter", void 0);
    (0, _defineProperty2.default)(this, "markerContainer", void 0);
    (0, _defineProperty2.default)(this, "$mapContainer", void 0);
    (0, _defineProperty2.default)(this, "cameraChangedCallback", void 0);
    (0, _defineProperty2.default)(this, "handleCameraChanged", e => {
      const {
        fov,
        near,
        far,
        height,
        pitch,
        rotation,
        aspect,
        position
      } = e.camera;
      const {
        lng,
        lat
      } = this.getCenter();
      // Tip: 触发地图变化事件
      this.emit('mapchange');
      if (this.cameraChangedCallback) {
        // resync viewport
        this.viewport.syncWithMapCamera({
          aspect,
          // AMap 定义 rotation 为顺时针方向，而 Mapbox 为逆时针
          // @see https://docs.mapbox.com/mapbox-gl-js/api/#map#getbearing
          bearing: 360 - rotation,
          far,
          fov,
          cameraHeight: height,
          near,
          pitch,
          // AMap 定义的缩放等级 与 Mapbox 相差 1
          zoom: this.map.getZoom() - 1,
          center: [lng, lat],
          offsetOrigin: [position.x, position.y]
        });
        const {
          offsetZoom = LNGLAT_OFFSET_ZOOM_THRESHOLD
        } = this.config;
        // set coordinate system
        if (this.viewport.getZoom() > offsetZoom) {
          this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.P20_OFFSET);
        } else {
          this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.P20);
        }
        this.cameraChangedCallback(this.viewport);
      }
    });
    this.config = container.mapConfig;
    this.configService = container.globalConfigService;
    this.coordinateSystemService = container.coordinateSystemService;
    this.eventEmitter = new _eventemitter.EventEmitter();
  }
  setBgColor(color) {
    this.bgColor = color;
  }
  addMarkerContainer() {
    const mapContainer = this.map.getContainer();
    if (mapContainer !== null) {
      const amap = mapContainer.getElementsByClassName('amap-maps')[0];
      this.markerContainer = _l7Utils.DOM.create('div', 'l7-marker-container', amap);
    }
  }
  getMarkerContainer() {
    return this.markerContainer;
  }

  //  map event
  on(type, handler) {
    if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
      this.eventEmitter.on(type, handler);
    } else {
      this.map.on(MapEventProxyMap[this.version][type] || type, handler);
    }
  }
  off(type, handler) {
    if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
      this.eventEmitter.off(type, handler);
    } else {
      this.map.off(MapEventProxyMap[this.version][type] || type, handler);
    }
  }
  getContainer() {
    return this.map.getContainer();
  }
  getMapCanvasContainer() {
    var _this$map$getContaine;
    return (_this$map$getContaine = this.map.getContainer()) === null || _this$map$getContaine === void 0 ? void 0 : _this$map$getContaine.getElementsByClassName('amap-maps')[0];
  }
  getCanvasOverlays() {
    var _this$$mapContainer;
    return (_this$$mapContainer = this.$mapContainer) === null || _this$$mapContainer === void 0 ? void 0 : _this$$mapContainer.querySelector('.amap-overlays');
  }
  getSize() {
    const size = this.map.getSize();
    return [size.getWidth(), size.getHeight()];
  }
  getType() {
    return 'amap';
  }
  getZoom() {
    // 统一返回 Mapbox 缩放等级
    return this.map.getZoom() - 1;
  }
  setZoom(zoom) {
    // 统一设置 Mapbox 缩放等级
    return this.map.setZoom(zoom + 1);
  }
  getCenter(options) {
    if (options !== null && options !== void 0 && options.padding) {
      const originCenter = this.getCenter();
      const padding = (0, _utils.toPaddingOptions)(options.padding);
      const px = this.lngLatToPixel([originCenter.lng, originCenter.lat]);
      const offsetPx = [(padding.right - padding.left) / 2, (padding.bottom - padding.top) / 2];
      const newCenter = this.pixelToLngLat([px.x - offsetPx[0], px.y - offsetPx[1]]);
      return newCenter;
    }
    const center = this.map.getCenter();
    return {
      lng: center.getLng(),
      lat: center.getLat()
    };
  }
  setCenter(lnglat, options) {
    if (options !== null && options !== void 0 && options.padding) {
      const padding = (0, _utils.toPaddingOptions)(options.padding);
      const px = this.lngLatToPixel(lnglat);
      const offsetPx = [(padding.right - padding.left) / 2, (padding.bottom - padding.top) / 2];
      const newCenter = this.pixelToLngLat([px.x + offsetPx[0], px.y + offsetPx[1]]);
      this.map.setCenter([newCenter.lng, newCenter.lat]);
    } else {
      this.map.setCenter(lnglat);
    }
  }
  getPitch() {
    return this.map.getPitch();
  }
  getRotation() {
    // 统一返回逆时针旋转角度
    return 360 - this.map.getRotation();
  }
  getBounds() {
    // @ts-ignore
    const amapBound = this.map.getBounds().toBounds();
    const NE = amapBound.getNorthEast();
    const SW = amapBound.getSouthWest();
    const center = this.getCenter();
    const maxlng = center.lng > NE.getLng() || center.lng < SW.getLng() ? 180 - NE.getLng() : NE.getLng();
    const minlng = center.lng < SW.getLng() ? SW.getLng() - 180 : SW.getLng();
    // 兼容 Mapbox，统一返回西南、东北
    return [[minlng, SW.getLat()], [maxlng, NE.getLat()]];
  }
  getMinZoom() {
    const zooms = this.map.get('zooms');
    return zooms[0] - 1;
  }
  getMaxZoom() {
    const zooms = this.map.get('zooms');
    return zooms[1] - 1;
  }
  setRotation(rotation) {
    return this.map.setRotation(rotation);
  }
  setPitch(pitch) {
    return this.map.setPitch(pitch);
  }
  zoomIn() {
    this.map.zoomIn();
  }
  zoomOut() {
    this.map.zoomOut();
  }
  panTo(p) {
    this.map.panTo(p);
  }
  panBy(x = 0, y = 0) {
    this.map.panBy(x, y);
  }
  fitBounds(extent) {
    this.map.setBounds(new AMap.Bounds([extent[0][0], extent[0][1], extent[1][0], extent[1][1]]));
  }
  setZoomAndCenter(zoom, center) {
    this.map.setZoomAndCenter(zoom + 1, center);
  }
  setMapStyle(style) {
    this.map.setMapStyle(this.getMapStyleValue(style));
  }
  setMapStatus(option) {
    this.map.setStatus(option);
  }
  getMapStyleConfig() {
    return _theme.MapTheme;
  }
  getMapStyleValue(name) {
    return this.getMapStyleConfig()[name] || name;
  }
  getMapStyle() {
    return this.map.getMapStyle();
  }
  pixelToLngLat(pixel) {
    const lngLat = this.map.pixelToLngLat(new AMap.Pixel(pixel[0], pixel[1]));
    return {
      lng: lngLat.getLng(),
      lat: lngLat.getLat()
    };
  }
  lngLatToPixel(lnglat) {
    const p = this.map.lnglatToPixel(new AMap.LngLat(lnglat[0], lnglat[1]));
    // lngLatToPixel
    return {
      x: p.getX(),
      y: p.getY()
    };
  }
  containerToLngLat(pixel) {
    const ll = new AMap.Pixel(pixel[0], pixel[1]);
    const lngLat = this.map.containerToLngLat(ll);
    return {
      lng: lngLat === null || lngLat === void 0 ? void 0 : lngLat.getLng(),
      lat: lngLat === null || lngLat === void 0 ? void 0 : lngLat.getLat()
    };
  }
  lngLatToContainer(lnglat) {
    const ll = new AMap.LngLat(lnglat[0], lnglat[1]);
    const pixel = this.map.lngLatToContainer(ll);
    return {
      x: pixel.getX(),
      y: pixel.getY()
    };
  }
  lngLatToCoord(lnglat) {
    // @ts-ignore
    const {
      x,
      y
    } = this.map.lngLatToGeodeticCoord(lnglat);
    return [x, -y];
  }
  lngLatToMercator(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  lnglat,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  altitude) {
    return {
      x: 0,
      y: 0,
      z: 0
    };
  }
  getModelMatrix(lnglat, altitude, rotate, scale = [1, 1, 1]) {
    const flat = this.viewport.projectFlat(lnglat);
    // @ts-ignore
    const modelMatrix = _glMatrix.mat4.create();
    _glMatrix.mat4.translate(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(flat[0], flat[1], altitude));
    _glMatrix.mat4.scale(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(scale[0], scale[1], scale[2]));
    _glMatrix.mat4.rotateX(modelMatrix, modelMatrix, rotate[0]);
    _glMatrix.mat4.rotateY(modelMatrix, modelMatrix, rotate[1]);
    _glMatrix.mat4.rotateZ(modelMatrix, modelMatrix, rotate[2]);
    return modelMatrix;
  }
  init() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const _this$config = _this.config,
        {
          id,
          style = 'light',
          minZoom = 0,
          maxZoom = 18,
          token = AMAP_API_KEY,
          mapInstance,
          plugin = []
        } = _this$config,
        rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded);
      // 高德地图创建独立的container；
      // tslint:disable-next-line:typedef
      yield new Promise(resolve => {
        const resolveMap = () => {
          if (mapInstance) {
            _this.map = mapInstance;
            _this.$mapContainer = _this.map.getContainer();
            setTimeout(() => {
              _this.map.on('camerachange', _this.handleCameraChanged);
              resolve();
            }, 30);
          } else {
            _this.$mapContainer = _this.creatMapContainer(id);
            const mapConstructorOptions = (0, _objectSpread2.default)({
              mapStyle: _this.getMapStyleValue(style),
              zooms: [minZoom, maxZoom],
              viewMode: '3D'
            }, rest);
            if (mapConstructorOptions.zoom) {
              // TODO: 高德地图在相同大小下需要比 MapBox 多一个 zoom 层级
              mapConstructorOptions.zoom += 1;
            }
            // @ts-ignore
            const map = new AMap.Map(_this.$mapContainer, mapConstructorOptions);
            // 监听地图相机事件
            map.on('camerachange', _this.handleCameraChanged);
            // Tip: 为了兼容开启 MultiPassRender 的情况
            // 修复 MultiPassRender 在高德地图 1.x 的情况下，缩放地图改变 zoom 时存在可视化层和底图不同步的现象
            map.on('camerachange', () => {
              setTimeout(() => _this.handleAfterMapChange());
            });

            // @ts-ignore
            _this.map = map;
            setTimeout(() => {
              resolve();
            }, 10);
          }
        };
        if (!amapLoaded && !mapInstance) {
          if (token === AMAP_API_KEY) {
            console.warn(`%c${_this.configService.getSceneWarninfo('MapToken')}!`, 'color: #873bf4;font-weigh:900;font-size: 16px;');
          }
          amapLoaded = true;
          plugin.push('Map3D');
          _amapJsapiLoader.default.load({
            key: token,
            // 申请好的Web端开发者Key，首次调用 load 时必填
            version: AMAP_VERSION,
            // 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15
            plugins: plugin // 需要使用的的插件列表，如比例尺'AMap.Scale'等
          }).then(() => {
            resolveMap();
            if (pendingResolveQueue.length) {
              pendingResolveQueue.forEach(r => r());
              pendingResolveQueue = [];
            }
          }).catch(e => {
            throw new Error(e);
          });
        } else {
          if (amapLoaded && window.AMap || mapInstance) {
            resolveMap();
          } else {
            pendingResolveQueue.push(resolveMap);
          }
        }
      });
      _this.viewport = new _Viewport.default();
    })();
  }
  meterToCoord(center, outer) {
    // 统一根据经纬度来转化
    // Tip: 实际米距离 unit meter
    const meterDis = AMap.GeometryUtil.distance(new AMap.LngLat(...center), new AMap.LngLat(...outer));

    // Tip: 三维世界坐标距离
    const [x1, y1] = this.lngLatToCoord(center);
    const [x2, y2] = this.lngLatToCoord(outer);
    const coordDis = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    return coordDis / meterDis;
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  updateView(viewOption) {
    return;
  }
  getOverlayContainer() {
    return undefined;
  }
  exportMap(type) {
    var _this$getContainer;
    const renderCanvas = (_this$getContainer = this.getContainer()) === null || _this$getContainer === void 0 ? void 0 : _this$getContainer.getElementsByClassName('amap-layer')[0];
    const layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
    return layersPng;
  }
  emit(name, ...args) {
    this.eventEmitter.emit(name, ...args);
  }
  once(name, ...args) {
    this.eventEmitter.once(name, ...args);
  }
  destroy() {
    var _this$$mapContainer2;
    // TODO: 销毁地图可视化层的容器
    (_this$$mapContainer2 = this.$mapContainer) === null || _this$$mapContainer2 === void 0 || (_this$$mapContainer2 = _this$$mapContainer2.parentNode) === null || _this$$mapContainer2 === void 0 || _this$$mapContainer2.removeChild(this.$mapContainer);

    // @ts-ignore
    delete window.initAMap;
    const $jsapi = document.getElementById(AMAP_SCRIPT_ID);
    if ($jsapi) {
      document.head.removeChild($jsapi);
    }
    this.map.destroy();
  }
  getMapContainer() {
    return this.$mapContainer;
  }
  onCameraChanged(callback) {
    this.cameraChangedCallback = callback;
  }
  handleAfterMapChange() {
    this.emit('mapAfterFrameChange');
  }
  creatMapContainer(id) {
    let $wrapper = id;
    if (typeof id === 'string') {
      $wrapper = document.getElementById(id);
    }
    const $amapdiv = document.createElement('div');
    $amapdiv.style.cssText += `
       position: absolute;
       top: 0;
       height: 100%;
       width: 100%;
     `;
    $amapdiv.id = 'l7_amap_div' + mapdivCount++;
    $wrapper.appendChild($amapdiv);
    return $amapdiv;
  }
}
exports.default = AMapBaseService;