// src/lineAtOffset/arc.ts
import { amap2Project, amap2UnProject } from "../geo";
import { MapType } from "../interface/map";
function arcLineAtOffset(source, target, offset, thetaOffset, mapVersion, segmentNumber = 30, autoFit) {
  let pointOffset = offset;
  if (autoFit) {
    pointOffset = Math.round(offset * (segmentNumber - 1)) / (segmentNumber - 1);
  }
  if (!thetaOffset) {
    return interpolate(source, target, pointOffset, 0.314, mapVersion);
  } else {
    return interpolate(source, target, pointOffset, thetaOffset, mapVersion);
  }
}
function bezier3(arr, t) {
  const ut = 1 - t;
  return (arr[0] * ut + arr[1] * t) * ut + (arr[1] * ut + arr[2] * t) * t;
}
function calDistance(p1, p2) {
  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
}
function midPoint(source, target, thetaOffset) {
  const center = [target[0] - source[0], target[1] - source[1]];
  const r = calDistance(center, [0, 0]);
  const theta = Math.atan2(center[1], center[0]);
  const r2 = r / 2 / Math.cos(thetaOffset);
  const theta2 = theta + thetaOffset;
  const mid = [r2 * Math.cos(theta2) + source[0], r2 * Math.sin(theta2) + source[1]];
  return mid;
}
function interpolate(source, target, offset, thetaOffset, mapVersion) {
  if (mapVersion === MapType["GAODE2.x"]) {
    const sourceFlat = amap2Project(source[0], source[1]);
    const targetFlat = amap2Project(target[0], target[1]);
    const mid = midPoint(sourceFlat, targetFlat, thetaOffset);
    const x = [sourceFlat[0], mid[0], targetFlat[0]];
    const y = [sourceFlat[1], mid[1], targetFlat[1]];
    return [...amap2UnProject(bezier3(x, offset), bezier3(y, offset)), 0];
  } else {
    const mid = midPoint(source, target, thetaOffset);
    const x = [source[0], mid[0], target[0]];
    const y = [source[1], mid[1], target[1]];
    return [bezier3(x, offset), bezier3(y, offset), 0];
  }
}
export {
  arcLineAtOffset
};
